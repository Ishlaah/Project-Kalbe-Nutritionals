# -*- coding: utf-8 -*-
"""Project Kalbe_Arima.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b8g0mBBcmXIKDn6Il4ySe-TtlWkYabdY

##Time Series (ARIMA)

Pada project kali ini menggunakan data yang sudah dicleansing dan langsung dapat digunakan. Datanya berasal dari Kable Nutritionals yang memiliki data customer, product, store dan transaction. Pada project ini menggunakan metode Time Series ARIMA dimana akan memprediksi total quantity harian
dari produk yang terjual.

Untuk prosesnya adalah

*   Import Library
*   Import Data
*   Cleaning Data
*   Merging Data
*   Feature Engineering
*   Exploratory Data Analysis
*   Modelling

#Importing Libraries
"""

pip install --upgrade statsmodels

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')
from statsmodels.tsa.arima_model import ARIMA
from statsmodels.tsa.stattools import adfuller
from scipy.ndimage.interpolation import shift
from sklearn.metrics import mean_squared_error
from math import sqrt

"""#Loading Data and Cleansing Data"""

customer_data = pd.read_csv("customer.csv")
product_data = pd.read_csv("product.csv")
store_data = pd.read_csv("store.csv")
transaction_data = pd.read_csv("transaction.csv")

"""Customer Data"""

customer_data

customer_data.shape

customer_data.info()

customer_data.isnull().sum()

#ubah tipe data ke string
customer_data['marital_status']= customer_data['marital_status'].astype('string')
print(customer_data.info())

customer_data['marital_status'].fillna('Tidak tahu', inplace=True)
customer_data

customer_data.isnull().sum()

"""Product Data"""

product_data.head()

product_data.shape

product_data.info()

#ubah tipe data ke string
product_data['product_name']= product_data['product_name'].astype('string')
print(product_data.info())

product_data.isnull().sum()

"""Store Data"""

store_data.head()

store_data.shape

store_data.info()

#ubah tipe data ke string
store_data['store_name']= store_data['store_name'].astype('string')
store_data['group_store']= store_data['group_store'].astype('string')
store_data['type']= store_data['type'].astype('string')
print(store_data.info())

store_data.isnull().sum()

"""Transaction Data"""

transaction_data.head()

transaction_data.shape

transaction_data.info()

#ubah tipe data ke tanggal
transaction_data['date'] = pd.to_datetime(transaction_data['date'])
print(transaction_data.info())

#transaction_data

"""#Merging Data"""

merge_data = customer_data.merge(transaction_data, on='customer_id').merge(product_data, on='product_id').merge(store_data, on='store_id')

merge_data

merge_data.info()

merge_data.isnull().sum()

"""#Feature Engineering"""

data_fix = merge_data.groupby(['date']).agg(
    total_quality = ('qty','sum'),
)
data_fix.sort_values(by="date", ascending=False)

data_fix.info()

"""#Exploratory Data Analysis"""

plt.figure(figsize=(20, 8))
plt.plot(data_fix.index, data_fix['total_quality'], label='total_quality')
plt.xlabel('Tanggal')
plt.ylabel('Total Quality')
plt.title('Grafik Time Series')
plt.legend()
plt.show()

"""#Arima"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from pandas import datetime as dt
import numpy as np
import matplotlib
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from statsmodels.api import tsa
import statsmodels.api as sm
from statsmodels.tsa.arima_model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

"""Mencari nilai p, q dan d untuk parameter metode Arima"""

from statsmodels.tsa.stattools import adfuller
result = adfuller(data_fix['total_quality'])
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
  print('\t%s: %.3f' % (key, value))

"""Mencari nilai d"""

import numpy as np, pandas as pd
import matplotlib.pyplot as plt
plt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})

# Original Series
fig, (ax1, ax2, ax3) = plt.subplots(3)
ax1.plot(data_fix.total_quality); ax1.set_title('Original Series'); ax1.axes.xaxis.set_visible(False)
# 1st Differencing
ax2.plot(data_fix.total_quality.diff()); ax2.set_title('1st Order Differencing'); ax2.axes.xaxis.set_visible(False)
# 2nd Differencing
ax3.plot(data_fix.total_quality.diff().diff()); ax3.set_title('2nd Order Differencing')
plt.show()

from statsmodels.graphics.tsaplots import plot_acf
fig, (ax1, ax2, ax3) = plt.subplots(3)
plot_acf(data_fix.total_quality, ax=ax1)
plot_acf(data_fix.total_quality.diff().dropna(), ax=ax2)
plot_acf(data_fix.total_quality.diff().diff().dropna(), ax=ax3)

"""Dari grafik diatas didapatkan bahwa nilai d adalah 1 karena lag pertama jauh di luar batas dan yang kedua juga di luar batas signifikan tetapi tidak terlalu jauh sehingga kita dapat memilih urutan d sebagai 1."""

from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(data_fix.total_quality.diff().dropna())

"""Dari grafik diatas didapatkan bahwa nilai p adalah 1 karena lag pertama jauh di luar batas dan yang kedua juga di luar batas signifikan tetapi tidak terlalu jauh sehingga kita dapat memilih urutan p sebagai 1."""

plot_acf(data_fix.total_quality.diff().dropna())

"""Dari grafik diatas didapatkan bahwa nilai q adalah 1 karena lag pertama jauh di luar batas dan yang kedua juga di luar batas signifikan tetapi tidak terlalu jauh sehingga kita dapat memilih urutan q sebagai 1.

Modelling Arima dengan parameter p, q dan d yang sudah diketahui yaitu (1,1,1)
"""

from statsmodels.tsa.arima.model import ARIMA
model = ARIMA(data_fix.total_quality, order = (1,1,1))
model_fit = model.fit()
model_fit.summary()

"""Gambar grafik prediksi total quality setiap hari dari produk yang dijual"""

# fit ARIMA model
fig = plt.figure(figsize=(20,8))
model = ARIMA(data_fix['total_quality'], order=(1,1,1))
ax = plt.gca()
results = model.fit()
plt.xlabel('Tanggal')
plt.ylabel('Total Quality')
plt.title('Grafik Prediksi Total Quality Setiap Hari')
plt.plot(data_fix['total_quality'])
plt.plot(results.fittedvalues, color='red')
ax.legend(['total_quality', 'Prediksi'])