# -*- coding: utf-8 -*-
"""Project Kalbe_Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RJFZq7aYogZh_ZtOeUOvq_ZSpmBYNLLH

##K-Means Clustering

Pada project kali ini menggunakan data yang sudah dicleansing dan langsung dapat digunakan. Datanya berasal dari Kable Nutritionals yang memiliki data customer, product, store dan transaction. Pada project ini menggunakan metode KMeans Clustering dimana akan memetakan segmentasi pelanggan berdasarkan centroid yang sudah dibuat.

Untuk prosesnya adalah

*   Import Library
*   Import Data
*   Cleaning Data
*   Merging Data
*   Feature Engineering
*   Exploratory Data Analysis
*   Modelling

#Importing Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

"""#Loading Data and Cleansing Data"""

customer_data = pd.read_csv("customer.csv")
product_data = pd.read_csv("product.csv")
store_data = pd.read_csv("store.csv")
transaction_data = pd.read_csv("transaction.csv")

"""Customer Data"""

customer_data

customer_data.shape

customer_data.info()

customer_data.isnull().sum()

#ubah tipe data ke string
customer_data['marital_status']= customer_data['marital_status'].astype('string')
print(customer_data.info())

customer_data['marital_status'].fillna('Tidak tahu', inplace=True)
customer_data

customer_data.isnull().sum()

"""Product Data"""

product_data.head()

product_data.shape

product_data.info()

#ubah tipe data ke string
product_data['product_name']= product_data['product_name'].astype('string')
print(product_data.info())

product_data.isnull().sum()

"""Store Data"""

store_data.head()

store_data.shape

store_data.info()

#ubah tipe data ke string
store_data['store_name']= store_data['store_name'].astype('string')
store_data['group_store']= store_data['group_store'].astype('string')
store_data['type']= store_data['type'].astype('string')
print(store_data.info())

store_data.isnull().sum()

"""Transaction Data"""

transaction_data.head()

transaction_data.shape

transaction_data.info()

#ubah tipe data ke tanggal
transaction_data['date'] = pd.to_datetime(transaction_data['date'])
print(transaction_data.info())

#transaction_data

"""#Merging Data"""

merge_data = customer_data.merge(transaction_data, on='customer_id').merge(product_data, on='product_id').merge(store_data, on='store_id')

merge_data

merge_data.info()

merge_data.isnull().sum()

"""#Feature Engineering"""

data_fix = merge_data.groupby(['customer_id']).agg(
    total_transaction = ('transaction_id','count'),
    total_quality = ('qty','sum'),
    total_amount = ('total_amount', 'sum')
)
data_fix.sort_values(by="total_amount", ascending=False)

data_fix.info()

"""#Exploratory Data Analysis"""

sns.lmplot(x='total_transaction', y='total_amount', data=data_fix, fit_reg=False, height=5, palette='Dark2')
plt.title('Transaksi vs Harga yang dikeluarkan customer vs Banyaknya transaksi', fontsize=14)
plt.xlabel('Transaksi', fontsize=13)
plt.ylabel('Harga pengeluaran', fontsize=13)
plt.show()

"""#K-Means Clustering Model

Menemukan nilai WCSS
"""

X = data_fix.iloc[:,[0,1,2]].values
X[:447]

from sklearn.cluster import KMeans
wcss = []
for i in range(1,11):
    model = KMeans(n_clusters=i, init = 'k-means++',n_init=10, max_iter=300, tol=0.0001, random_state = 100)
    model.fit(X)
    wcss.append(model.inertia_)
print(wcss)

plt.figure(figsize=(10,5))
plt.plot(list(range(1, 11)), wcss, color='royalblue', marker='o', linewidth=2, markersize=12, markerfacecolor='m', markeredgecolor='m')
plt.title('WCSS vs Banyaknya Cluster', fontsize=18)
plt.xlabel('Jumlah Cluster', fontsize=15)
plt.ylabel('WCSS', fontsize=15)
plt.show()

"""Ditemukan pada grafik diatas bahwa K = 3

Modelling
"""

model= KMeans(n_clusters=3, init='k-means++', n_init=10, max_iter=300, tol=0.0001, random_state=100)
model.fit(X)
labels=model.labels_
centroid=model.cluster_centers_

y = model.fit_predict(X)
print(y)

# Plotting all the clusters
plt.figure(figsize=(11,9))

# plot the centroids
plt.scatter(x=data_fix['total_transaction'], y=data_fix['total_quality'], c=labels, cmap='winter')
plt.scatter(x=centroid[:,0], y=centroid[:,1], s=50, c='red', label='Centroids')

plt.title('Segmentasi Pelanggan Berdasarkan Transaksi Dan harga Penjualan')
plt.xlabel('Transaksi')
plt.ylabel('Harga Pengeluaran')
plt.show()